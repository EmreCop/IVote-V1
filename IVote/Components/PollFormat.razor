@inject PollService pollservice
@inject KandidaatService kandidaatService
@rendermode InteractiveServer

    <h5 class="fs-1 text-center p-1">
        @poll?.Naam
    </h5>
<div class="" style="width: 25rem">
  <div class="poll">
        <div class="poll-body parent">
      @if (poll != null && poll.KanditaatIds != null && poll.IsActive)
      {
        var kadidaten = new List<int>(poll.KanditaatIds); ;

        foreach (var kandidaatid in kadidaten)
        {
          var kandidaat = kandidaatService.GetKandidaatById(kandidaatid);
          if (kandidaat != null)
          {
            <KandinaatFormat kandidaat="kandidaat" />
          }
          else
          {
            poll.KanditaatIds.Remove(kandidaatid);
            pollservice.UpdatePoll(poll);
          }

        }
      }

            <button class="btn btn-success" @onclick="ShowModal">Uitslag</button>
    </div>
        
  </div>
    
</div>


<style>
    .parent {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(3, 1fr);
        grid-column-gap: 10px;
        grid-row-gap: 10px;
    }

    .grid {
        grid-area: 1 / 1 / 2 / 2;
    }
    .poll-header {
        height: 30px;
        padding-bottom: 10px;
    }
    .btn-success {
        font-size: 100px;
    }
</style>



<Uitslag @bind-IsVisible="modalVisible" poll=" Dummypoll" />

@code {
  [Parameter]
  public Poll? poll { get; set; }


  Poll Dummypoll = new Poll { StartDate = DateOnly.FromDateTime(DateTime.Now), EndDate = DateOnly.FromDateTime(DateTime.UtcNow) };


  bool modalVisible = false;
  void ShowModal()
  { @if (poll is not null)
    {
      Dummypoll = poll;
      modalVisible = true;
    }

  }
}
