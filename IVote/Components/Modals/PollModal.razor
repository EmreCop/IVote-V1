@inherits ComponentBase
@inject PollService pollservice
@inject KandidaatService kandidaatService
@rendermode InteractiveServer


<div class="modal" tabindex="-1" style="display: @(IsVisible ? "block" : "none")">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">@Title</h5>
        <button type="button" class="close btn btn-danger" @onclick="CloseModal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        @if (Poll != null && NewPoll == false)
        {
          <div class="form-group">
            <label>Name</label>
            <input class="form-control" type="text" @bind="Poll.Naam" @bind:after="UpdatePoll" />

            <label>StartDate</label>
            <input class="form-control" type="date" @bind="Poll.StartDate" @bind:after="UpdatePoll" />

            <label>EndDate</label>
            <input class="form-control" type="date" @bind=Poll.EndDate @bind:after="UpdatePoll" />

            <label>KandidaatIDs</label>
            <KandidaatSelector KanditaatSelected="HandleKandidaatSeleceted" />



          </div>
        }
        else
        {
          <div class="form-group">
            <label>Name</label>
            <input class="form-control" type="text" required @bind="Name" />
            <p>*required</p>

            <label>StartDate</label>
            <input class="form-control" type="date" required @bind="StartDate" />
            <p>*required</p>

            <label>EndDate</label>
            <input class="form-control" type="date" @bind="EndDate" />
            <KandidaatSelector KanditaatSelected="(e)=>Kandidaten = e" />

            <br />
            <button class="btn btn-primary form-control " @onclick="AddNewPoll">Add New Poll</button>

            <h5 style="Color:red">@Error</h5>
          </div>
        }
      </div>
      <div class="modal-footer">
      </div>
    </div>
  </div>
</div>

@code {
  [Parameter]
  public string? Title { get; set; }

  [Parameter]
  public bool IsVisible { get; set; }

  [Parameter]
  public EventCallback<bool> IsVisibleChanged { get; set; }

  [Parameter]
  public Poll? Poll { get; set; }

  [Parameter]
  public bool NewPoll { get; set; }

  string? Name;
  DateOnly? StartDate;
  DateOnly? EndDate;
  List<int>? Kandidaten;

  string? Error;


  private async Task CloseModal()
  {
    IsVisible = false;
    await IsVisibleChanged.InvokeAsync(IsVisible);

  }


  private void UpdatePoll()
  {
    if (Poll != null)
    {
      pollservice.UpdatePoll(Poll);
    }

  }

  private async void AddNewPoll()
  {
    if (Name != null && StartDate != null && EndDate != null)
    {
      var NewPoll = new Poll { Naam = Name, StartDate = (DateOnly)StartDate, EndDate = (DateOnly)EndDate, KanditaatIds = Kandidaten };
      pollservice.AddPoll(NewPoll);
      await CloseModal();
      Name = null;
      StartDate = null;
      EndDate = null;
      Kandidaten = null;

      Error = "";
    }
    else
    {
      Error = "Please Fill in all required fields!";
    }
  }

  void HandleKandidaatSeleceted(List<int> Ids)
  {
    if (Poll != null)
    {
      Poll.KanditaatIds = Ids;
    }

    UpdatePoll();
  }
}



