@inherits ComponentBase
@inject KandidaatService kandidaatservice
@inject PollService pollservice
@rendermode InteractiveServer


<div class="modal" tabindex="-1" style="display: @(IsVisible ? "block" : "none")">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Uitslag</h4>
        <button type="button" class="close btn btn-danger" @onclick="CloseModal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        @if (poll != null)
        {
          <div>
            <h5>Winaar</h5>
            <hr />
            <KandinaatFormat kandidaat="mostVoteKandidaat"  IsUitslag="true"/>
          </div>
        }

      </div>
      <div class="modal-footer">
      </div>
    </div>
  </div>
</div>

@code {
  [Parameter]
  public string? Title { get; set; }

  [Parameter]
  public bool IsVisible { get; set; }

  [Parameter]
  public EventCallback<bool> IsVisibleChanged { get; set; }

  [Parameter]
  public Poll? poll { get; set; }


  int TotaalVotes = 0;
  int MostVotes = 0;
  Kandidaat? mostVoteKandidaat;

  private async Task CloseModal()
  {
    IsVisible = false;
    await IsVisibleChanged.InvokeAsync(IsVisible);

  }


  void Callculations()
  {
    TotaalVotes = 0;
    @if (poll != null && poll.KanditaatIds != null)
    {

      foreach (var KandidaadId in poll.KanditaatIds)
      {
        var kandidaat = kandidaatservice.GetKandidaatById(KandidaadId);

        TotaalVotes += kandidaat.Votes;

        if (kandidaat.Votes > MostVotes)
        {
          MostVotes = kandidaat.Votes;
          mostVoteKandidaat = kandidaat;
        }
      }

      @if (poll.TotalAmoutofVotes == null)
      {
        poll.TotalAmoutofVotes = new();
      }
      poll.TotalAmoutofVotes = TotaalVotes;
      @if (mostVoteKandidaat != null)
      {
        poll.WinaarPollID = mostVoteKandidaat.Id;
      }
      pollservice.UpdatePoll(poll);
    }
  }



  protected override void OnParametersSet()
  {
    @if (IsVisible)
    {
      Callculations();
    }
    base.OnParametersSet();
  }
}




